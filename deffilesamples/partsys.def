
// Note : particle angles (and angular velocity, etc) are given in 
// ROLL, PITCH, YAW form.  This may not be what you are accustomed to.
// Also, the signs of the angles may not be what you are accustomed to.
// Experiment with the values until you get what you want.

// Angles are specified in degrees.  
// Angular velocities are in degrees per second.
// Distances are specified in meters.
// Velocities are specified in meters per second.
// Mass is specified in kg.
// Forces are specified in newtons.
// Density and viscosity (used by the fluid_friction affector) 
// are of unknown units.
// Time is specified in seconds.

particle_systems
{

particle_system
{
	name = "air expl puffs";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 12.0, 24.0; // a multiplier
	color_range = 0.2, 0.2, 0.2, 0.4, // start r, g, b, a
	              0.2, 0.2, 0.2, 0.6; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.250;
		duration = 0.50;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 25., 30.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 5.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 3.0, 7.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
}



particle_system
{
	name = "tracers";
	
	// turning off lighting and turning on emissive gives the tracers a sort 
	// of self-illuminating glow
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed
	
	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = 0.4, 10., 0.4, 0.4, 10., 0.4; // a multiplier
	color_range = .50, .25, .08, 1.0, // start r, g, b, a
	              .66, .42, .14, 0.0; // end r, g, b, a
	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_2;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.10;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			// the M61A1 fires around 100 rounds per second.  If you assume 
			// that one in every 5 rounds is a tracer, that gives you a rate of 
			// fire of about 20 tracers per second.  We'll give it a small 
			// range to vary over, to make it a little more natural-looking.
			rate_range = 18., 21.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 0.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			
			// the M61A1's ammunition leaves the barrel at 1036 m/s
			speed_range = 1036.0, 1036.0; // range of initial speed, in m/s
			
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s

			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
			
			// the M61A1 is not extremely accurate.  The result of firing a 
			// burst of rounds is almost a "cloud" of projectiles traveling 
			// toward the target.  We'll give it a 1-degree cone of fire; you 
			// are quite free to adjust this as necessary.
			phi_range = 89.50, 90.50;
			theta_range = 89.50, 90.50;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -9.81;
		}
		
		// You might want to add a fluid friction affector here.  Bullets do 
		// slow down in the air.  The effect can be noticable.
	}
}

particle_system
{
	name = "chaff 1";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 5.0, 15.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.5; // end r, g, b, a
	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.10;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 17., 25.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.10, 1.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 25.0, 37.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, -10.0, 0.0, 0.0, 10.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
//			phi_range = 45.0, 90.0;
			theta_range = 40.0, 140.;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -4.81;
		}
		
		affector
		{
			type = fluid_friction;
			density = 0.2;
			viscosity = 0.0000006;
		}
		
		affector
		{
			type = texture_animation;
			period = 0.05;
			loop = true;
			image = "/opt/data/images-ours/sparkle-0a.png";
			image = "/opt/data/images-ours/sparkle-1a.png";
			image = "/opt/data/images-ours/sparkle-2a.png";
			image = "/opt/data/images-ours/sparkle-3a.png";
		}
		
		
	}
}



particle_system
{
	name = "smoke trail";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = 4.0; // lifetime of a particle, in seconds
	size_range = 0.1, 30., 0.1, 3., 30., 3.; // a multiplier
	color_range = 0.3, 0.3, 0.3, 0.7, // start r, g, b, a
	              0.7, 0.7, 0.7, 0.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_2;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 50., 50.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, -15.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = fluid_friction;
//			density = ;
//			viscosity = ;
		}
	}
}

particle_system
{
	name = "dirt plume 1";
	alignment = billboard; // billboard or fixed
	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = .10, .20; // a multiplier
	color_range = 0.1, 0.1, 0.1, 1.0, // start r, g, b, a
	              0.0, 0.0, 0.0, 0.0; // end r, g, b, a
	mass = 0.14; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.40;
		duration = 0.50;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 80., 105.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.10, 0.50;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 0.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 8.0, 17.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
//			phi_range = 45.0, 90.0;
			theta_range = 0.0, 10.;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -9.81;
		}
	}
}


particle_system
{
	name = "scattered debris 1";
	alignment = fixed; // billboard or fixed
	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = .50, .50; // a multiplier
	color_range = .50, .25, .08, 1.0, // start r, g, b, a
	              .66, .42, .14, 0.0; // end r, g, b, a
	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_3;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.10;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 17., 25.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.10, 1.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = -180., -180., -180., 180., 180., 180.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 8.0, 17.0; // range of initial speed, in m/s
			rot_vel_range = -200.0, -200.0, -200.0, 200.0, 200.0, 200.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
//			phi_range = 45.0, 90.0;
			theta_range = 40.0, 70.;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -9.81;
		}
	}
}

particle_system
{
	name = "debug tracers";
	
	// turning off lighting and turning on emissive gives the tracers a sort 
	// of self-illuminating glow
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed
	
	time_to_live = 14.2; // lifetime of a particle, in seconds
	size_range = 3.50, 3.50; // a multiplier
//	color_range = .50, .25, .08, 1.0, // start r, g, b, a
//	              .66, .42, .14, 1.0; // end r, g, b, a
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 1.0; // end r, g, b, a

	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_2;

texture = "/opt/data/OpenSceneGraph-Data/Images/smoke.rgb";
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.10;
//		duration = 1.0;
//		endless = false;

		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			// the M61A1 fires around 100 rounds per second.  If you assume 
			// that one in every 5 rounds is a tracer, that gives you a rate of 
			// fire of about 20 tracers per second.  We'll give it a small 
			// range to vary over, to make it a little more natural-looking.
			rate_range = 2., 2.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 80., 45., 0., 80., 45.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			
			speed_range = 10.0, 10.0; // range of initial speed, in m/s
			
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s

			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
			
			// the M61A1 is not extremely accurate.  The result of firing a 
			// burst of rounds is almost a "cloud" of projectiles traveling 
			// toward the target.  We'll give it a 1-degree cone of fire; you 
			// are quite free to adjust this as necessary.
			phi_range = 90.0, 90.0;
			theta_range = 90.0, 90.0;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, 0.;
		}
		
		// You might want to add a fluid friction affector here.  Bullets do 
		// slow down in the air.  The effect can be noticable.
		
		affector
		{
			type = texture_animation;
			period = 0.0333;
			loop = true;
			
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp00.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp01.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp02.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp03.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp04.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp05.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp06.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp07.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp08.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp09.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp10.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp11.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp12.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp13.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp14.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp15.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp16.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp17.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp18.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp19.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp20.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp21.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp22.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp23.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp24.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp25.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp26.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp27.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp28.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp29.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp30.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp31.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp32.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp33.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp34.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp35.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp36.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp37.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp38.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp39.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp40.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp41.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp42.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp43.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp44.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp45.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp46.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp47.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp48.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp49.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp50.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp51.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp52.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp53.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp54.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp55.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp56.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp57.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp58.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp59.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp60.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp61.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp62.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp63.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp64.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp65.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp66.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp67.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp68.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp69.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp70.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp71.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp72.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp73.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp74.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp75.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp76.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp77.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp78.rgb";
			image = "/opt/data/anim/detailer_grndexpl/fx_gndExp79.rgb";
		}
	}
}


particle_system
{
	// This is an interesting effect, so I'm going to keep it here for now
	name = "hmmm";
	alignment = fixed; // billboard or fixed
	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = .50, .50; // a multiplier
	color_range = .50, .25, .08, 1.0, // start r, g, b, a
	              .66, .42, .14, 0.0; // end r, g, b, a
	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_2;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.10;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 17., 25.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.10, 1.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = -180., -180., -180., 180., 180., 180.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 8.0, 17.0; // range of initial speed, in m/s
			rot_vel_range = -200.0, -200.0, -200.0, 200.0, 200.0, 200.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
//			phi_range = 45.0, 90.0;
			theta_range = 40.0, 70.;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -9.81;
		}
	}
}

particle_system
{
	name = "debug fountain";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 1.0, 5.0; // a multiplier
	color_range = 0.1, 0.1, 1.0, 1.0, // start r, g, b, a
	              0.1, 0.1, 1.0, 0.5; // end r, g, b, a
	mass = 0.4; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = intersecting_quads_3;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.10;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = true;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 1.0, 25.0;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 10.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 360., 360., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 25.0, 37.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, -10.0, 0.0, 0.0, 10.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
//			phi_range = 45.0, 90.0;
			theta_range = 40.0, 140.;
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -4.81;
		}
		
		
		
	}
}


particle_system
{
	name = "debug trail";
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = -1.0; // lifetime of a particle, in seconds
	size_range = 1.0, 1.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

//	texture = "/opt/data/images-ours/vaportrail-0a.png"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
//	texture = "/opt/data/OpenSceneGraph-Data/Images/smoke.rgb";
	texture = "/opt/data/images-ours/test2.rgb";
	
	trail_type = cross_ribbon;
	trail_num_points = 20;
	trail_interval = 0.1;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = follow;
		}
	}
}
particle_system
{
	name = "dust patter";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 0.2; // lifetime of a particle, in seconds
	size_range = 1.0, 1.0; // a multiplier
	color_range = 0.77, 0.68, 0.36, 1.0, // start r, g, b, a
	              0.88, 0.77, 0.41, 0.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 1.10;
		duration = 3.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 18., 30.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 5., 20.;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
}


particle_system
{
	name = "shrapnel";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 0.7; // lifetime of a particle, in seconds
	size_range = 1.0, 1.0; // a multiplier
	color_range = 0.77, 0.68, 0.36, 1.0, // start r, g, b, a
	              0.88, 0.77, 0.41, 0.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.2;
		duration = 0.35;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 180., 200.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 5., 20.;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
}


particle_system
{
	name = "ground fire smoke";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 3.0, 7.0; // a multiplier
	color_range = 0.2, 0.2, 0.2, 0.4, // start r, g, b, a
	              0.2, 0.2, 0.2, 0.6; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 4.0;
		duration = 15.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 15., 20.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 5.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 5.0, 10.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = linear_accel;
			vector = 0.0, 1.5, 0.0;
		}
	}
	
}


particle_system
{
	name = "dust cloud";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 12.0, 24.0; // a multiplier
	color_range = 0.77, 0.68, 0.36, 1.0, // start r, g, b, a
	              0.88, 0.77, 0.41, 0.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.10;
		duration = 1.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 15., 20.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = sphere; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 5.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 1.0, 2.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
}



particle_system
{
	name = "big expl ring";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = 0.8; // lifetime of a particle, in seconds
	size_range = 20.0, 320.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 0.7, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.1; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/big-expl-ring-0a.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.0;
//		duration = 5.0;
//		endless = true;
		
		reference_frame = time_zero;

		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 2.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = -90., 0., -90., -90., 0., -90.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
}



particle_system
{
	name = "big expl cloud";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 40.0, 55.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.0;
		duration = 0.20;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 100., 120.;
//			num_particles_range = 15., 20.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = sphere; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 40.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 6.0, 8.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.0;
		duration = 1.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 10., 12.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0.0, 30.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 4.0, 5.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
}





particle_system
{
	name = "smoke tendril";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
//	alignment = billboard; // billboard or fixed
	alignment = fixed; // billboard or fixed

	time_to_live = 5.0; // lifetime of a particle, in seconds
	size_range = 5.3, 10.0; // a multiplier
	color_range = 0.2, 0.2, 0.2, 1.0, // start r, g, b, a
	              0.2, 0.2, 0.2, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 0.08; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = quad; // fixme - should be intersecting_quads_3
	trail_num_points = 40;
	trail_interval = 0.06;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.250;
		duration = 0.50;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
// might want to try additive vel... could make tendrils shoot off 
// in the direction the target was traveling... could look kewl
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 5., 10.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
//			orientation_range = 0., 0., 0., 0., 0., 360.;
			orientation_range = 0., 0., 0., 360., 360., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 10.0, 20.0; // range of initial speed, in m/s
//			rot_vel_range = 0.0, 0.0, 80.0, 0.0, 0.0, 360.0; // range of initial rotational velocity, in degrees/s
			rot_vel_range = -100.0, -100.0, -100.0, 100.0, 100.0, 100.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
			phi_range = 0., 360.;
			theta_range = 0., 180.;
		}
	}
	
// don't want tendril to follow aircraft :)
//	behavior
//	{
//		affector
//		{
//			type = follow;
//		}
//	}
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -7.;
		}
		
		
	}
	behavior
	{
		reference_frame = absolute;
		affector
		{
			type = fluid_friction;
			density = 1.2929;
			viscosity = 0.000018;
		}
	}
}


particle_system
{
	name = "burning aircraft debris";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
//	alignment = billboard; // billboard or fixed
	alignment = fixed; // billboard or fixed

	time_to_live = 25.0; // lifetime of a particle, in seconds
	size_range = 2.3, 10.0; // a multiplier
//	color_range = 0.2, 0.2, 0.2, 1.0, // start r, g, b, a
//	              0.2, 0.2, 0.2, 1.0; // end r, g, b, a
	color_range = 0.95, 0.74, 0.08, 1.0, // start r, g, b, a
	              0.95, 0.54, 0.08, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 0.04; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = quad; // fixme - should be intersecting_quads_3
	trail_num_points = 40;
	trail_interval = 0.06;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.250;
		duration = 1.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
// might want to try additive vel... could make tendrils shoot off 
// in the direction the target was traveling... could look kewl
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 3.0, 12.0;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
//			orientation_range = 0., 0., 0., 0., 0., 360.;
			orientation_range = 0., 0., 0., 360., 360., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 20.0, 40.0; // range of initial speed, in m/s
//			rot_vel_range = 0.0, 0.0, 80.0, 0.0, 0.0, 360.0; // range of initial rotational velocity, in degrees/s
			rot_vel_range = -100.0, -100.0, -100.0, 100.0, 100.0, 100.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
			phi_range = 0., 360.;
			theta_range = 0., 180.;
		}
	}
	
// don't want tendril to follow aircraft :)
//	behavior
//	{
//		affector
//		{
//			type = follow;
//		}
//	}
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -7.;
		}
		
		
	}
	behavior
	{
		reference_frame = absolute;
		affector
		{
			type = fluid_friction;
			density = 1.2929;
			viscosity = 0.000018;
		}
	}
}


particle_system
{
	name = "dust tendril";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 5.0; // lifetime of a particle, in seconds
	size_range = 1.3, 4.0; // a multiplier
	color_range = 0.53, 0.47, 0.25, 1.0, // start r, g, b, a
	              0.53, 0.47, 0.25, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 0.08; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = quad;
	trail_num_points = 20;
	trail_interval = 0.07;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 4., 7.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 10.0, 20.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 300.0, 0.0, 0.0, 600.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles 
			phi_range = 0., 360.;
			theta_range = 0., 40.;
		}
	}
	
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, -10.;
		}
		
		
	}
}


particle_system
{
	name = "wingtip contrail thin";
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = -1.0; // lifetime of a particle, in seconds
	size_range = 0.20, 0.20; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/contrail-0a.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = cross_ribbon;
	trail_num_points = 20;
	trail_interval = 0.15;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = follow;
		}
	}
}


particle_system
{
	name = "wingtip contrail thick";
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = -1.0; // lifetime of a particle, in seconds
	size_range = 0.36, 0.36; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/contrail-1a.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = cross_ribbon;
	trail_num_points = 20;
	trail_interval = 0.15;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = follow;
		}
	}
}


particle_system
{
	name = "wingtip contrail glline";
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = -1.0; // lifetime of a particle, in seconds
	size_range = 1.0, 1.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

//	texture = ""; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = line;
	trail_num_points = 20;
	trail_interval = 0.15;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = follow;
		}
	}
}


particle_system
{
	name = "aircraft generic dark trail";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = -1.0; // lifetime of a particle, in seconds
	size_range = 0.36, 0.36; // a multiplier
	color_range = 0.2, 0.2, 0.2, 1.0, // start r, g, b, a
	              0.2, 0.2, 0.2, 1.0; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = trail;

	texture = "/opt/data/images-ours/contrail-1a.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	trail_type = cross_ribbon;
	trail_num_points = 20;
	trail_interval = 0.15;
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	behavior
	{
		affector
		{
			type = follow;
		}
	}
}


particle_system
{
	name = "launch ring";
	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = fixed; // billboard or fixed

	time_to_live = 0.4; // lifetime of a particle, in seconds
	size_range = 1.0, 120.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.1; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/launch-ring-0c.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.10;
		duration = 5.0;
		endless = true;
		
		reference_frame = time_zero;

		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 1.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = -90., 0., -90., -90., 0., -90.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
}



particle_system
{
	name = "launch puffs";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.2; // lifetime of a particle, in seconds
	size_range = 6.0, 12.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.6; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.250;
		duration = 0.50;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		reference_frame = time_zero;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 15., 30.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, -5.0, 5.0;
			radius_range = 0.0, 5.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 5.0, 20.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
}


particle_system
{
	name = "launch stream";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 8.; // lifetime of a particle, in seconds
	size_range = 5.0, 15.0; // a multiplier
	color_range = 0.95, 0.95, 0.95, 1.0, // start r, g, b, a
	              0.75, 0.75, 0.75, 0.1; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 0.11; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	texture = "/opt/data/images-ours/smoke-0c.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
//	texture = "/opt/data/images-ours/smoke-1a-light.rgb"; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		start_time = 0.0;
		duration = 2.0;
		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = random; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			rate_range = 40., 50.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, -3.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
			orientation_range = 0., 0., 0., 0., 0., 360.;
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 35.0, 40.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s

			// phi_range and theta_range determine the shape of the "cone" of emitted particles
//			phi_range = 0., 360.;  // half sphere
//			theta_range = 0., 90.; // half sphere
			phi_range = -70., -110.;
			theta_range = 90., 90.;
		}
	}
	
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = linear_accel;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			vector = 0.0, 0.0, 5.;
		}
		
	}
	behavior
	{
		// fluid friction affectors (as of august 2004) must have the 
		// reference frame set to "absolute".  These are really the only 
		// affectors that require this.  BTW - Fluid friction affectors 
		// need to be placed in their own behavior group because of this.
		reference_frame = absolute;
		affector
		{
			type = fluid_friction;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			density = 1.2929;
			viscosity = 0.000018;
		}
		
	}
}


particle_system
{
	name = "airExplosion1";

	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.01.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.02.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.03.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.04.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.05.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.06.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.07.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.08.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.09.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.10.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.11.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.12.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.13.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.14.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.15.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.16.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.17.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.18.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.19.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.20.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.21.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.22.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.23.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.24.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.25.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.26.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.27.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.28.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.29.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.30.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.31.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.32.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.33.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.34.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.35.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.36.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.37.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.38.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.39.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.40.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.41.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.42.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.43.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.44.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.45.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.46.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.47.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.48.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.49.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.50.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.51.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.52.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.53.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.54.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.55.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.56.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.57.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.58.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.59.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.60.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.61.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.62.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.63.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.64.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.65.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.66.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.67.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.68.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.69.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.70.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.71.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.72.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.73.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.74.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.75.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.76.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.77.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.78.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.79.sgi";
			image = "/opt/data/anim/sean/airExplosion1/airExplosion1.80.sgi";

		}
	}
}

particle_system
{
	name = "airExplosion_wTrails1";

	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.01.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.02.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.03.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.04.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.05.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.06.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.07.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.08.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.09.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.10.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.11.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.12.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.13.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.14.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.15.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.16.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.17.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.18.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.19.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.20.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.21.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.22.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.23.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.24.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.25.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.26.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.27.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.28.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.29.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.30.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.31.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.32.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.33.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.34.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.35.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.36.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.37.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.38.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.39.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.40.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.41.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.42.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.43.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.44.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.45.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.46.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.47.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.48.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.49.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.50.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.51.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.52.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.53.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.54.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.55.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.56.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.57.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.58.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.59.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.60.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.61.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.62.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.63.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.64.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.65.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.66.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.67.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.68.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.69.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.70.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.71.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.72.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.73.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.74.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.75.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.76.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.77.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.78.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.79.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails1/airExplosion_wTrails1.80.sgi";

		}
	}
}

particle_system
{
	name = "airExplosion_wTrails2";

	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.01.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.02.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.03.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.04.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.05.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.06.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.07.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.08.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.09.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.10.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.11.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.12.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.13.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.14.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.15.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.16.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.17.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.18.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.19.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.20.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.21.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.22.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.23.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.24.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.25.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.26.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.27.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.28.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.29.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.30.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.31.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.32.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.33.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.34.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.35.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.36.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.37.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.38.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.39.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.40.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.41.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.42.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.43.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.44.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.45.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.46.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.47.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.48.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.49.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.50.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.51.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.52.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.53.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.54.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.55.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.56.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.57.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.58.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.59.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.60.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.61.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.62.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.63.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.64.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.65.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.66.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.67.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.68.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.69.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.70.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.71.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.72.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.73.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.74.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.75.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.76.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.77.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.78.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.79.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails2/airExplosion_wTrails2.80.sgi";

		}
	}
}

particle_system
{
	name = "airExplosion_wTrails3";

	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.01.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.02.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.03.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.04.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.05.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.06.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.07.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.08.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.09.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.10.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.11.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.12.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.13.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.14.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.15.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.16.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.17.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.18.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.19.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.20.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.21.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.22.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.23.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.24.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.25.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.26.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.27.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.28.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.29.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.30.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.31.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.32.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.33.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.34.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.35.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.36.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.37.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.38.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.39.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.40.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.41.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.42.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.43.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.44.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.45.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.46.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.47.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.48.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.49.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.50.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.51.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.52.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.53.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.54.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.55.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.56.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.57.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.58.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.59.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.60.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.61.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.62.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.63.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.64.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.65.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.66.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.67.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.68.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.69.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.70.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.71.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.72.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.73.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.74.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.75.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.76.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.77.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.78.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.79.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails3/airExplosion_wTrails3.80.sgi";

		}
	}
}

particle_system
{
	name = "airExplosion_wTrails4";

	emissive = true; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.01.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.02.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.03.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.04.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.05.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.06.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.07.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.08.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.09.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.10.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.11.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.12.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.13.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.14.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.15.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.16.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.17.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.18.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.19.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.20.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.21.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.22.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.23.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.24.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.25.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.26.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.27.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.28.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.29.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.30.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.31.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.32.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.33.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.34.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.35.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.36.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.37.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.38.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.39.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.40.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.41.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.42.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.43.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.44.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.45.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.46.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.47.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.48.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.49.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.50.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.51.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.52.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.53.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.54.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.55.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.56.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.57.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.58.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.59.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.60.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.61.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.62.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.63.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.64.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.65.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.66.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.67.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.68.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.69.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.70.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.71.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.72.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.73.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.74.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.75.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.76.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.77.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.78.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.79.sgi";
			image = "/opt/data/anim/sean/airExplosion_wTrails4/airExplosion_wTrails4.80.sgi";

		}
	}
}

particle_system
{
	name = "blast1";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/blast1/blast1.01.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.02.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.03.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.04.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.05.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.06.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.07.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.08.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.09.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.10.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.11.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.12.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.13.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.14.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.15.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.16.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.17.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.18.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.19.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.20.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.21.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.22.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.23.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.24.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.25.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.26.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.27.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.28.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.29.sgi";
			image = "/opt/data/anim/sean/blast1/blast1.30.sgi";

		}
	}
}

particle_system
{
	name = "airSmokePuff1";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.01.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.02.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.03.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.04.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.05.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.06.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.07.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.08.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.09.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.10.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.11.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.12.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.13.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.14.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.15.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.16.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.17.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.18.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.19.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.20.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.21.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.22.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.23.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.24.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.25.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.26.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.27.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.28.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.29.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.30.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.31.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.32.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.33.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.34.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.35.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.36.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.37.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.38.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.39.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.40.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.41.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.42.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.43.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.44.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.45.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.46.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.47.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.48.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.49.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.50.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.51.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.52.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.53.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.54.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.55.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.56.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.57.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.58.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.59.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.60.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.61.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.62.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.63.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.64.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.65.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.66.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.67.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.68.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.69.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.70.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.71.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.72.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.73.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.74.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.75.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.76.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.77.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.78.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.79.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.80.sgi";

		}
	}
}


particle_system
{
	name = "airSmokePuff1 offset +z";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 18.0, 20.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 15.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;


			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.01.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.02.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.03.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.04.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.05.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.06.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.07.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.08.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.09.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.10.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.11.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.12.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.13.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.14.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.15.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.16.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.17.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.18.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.19.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.20.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.21.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.22.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.23.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.24.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.25.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.26.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.27.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.28.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.29.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.30.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.31.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.32.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.33.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.34.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.35.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.36.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.37.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.38.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.39.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.40.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.41.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.42.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.43.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.44.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.45.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.46.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.47.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.48.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.49.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.50.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.51.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.52.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.53.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.54.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.55.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.56.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.57.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.58.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.59.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.60.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.61.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.62.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.63.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.64.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.65.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.66.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.67.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.68.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.69.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.70.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.71.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.72.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.73.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.74.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.75.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.76.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.77.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.78.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.79.sgi";
			image = "/opt/data/anim/sean/airSmokePuff1/airSmokePuff1.80.sgi";

		}
	}
}


particle_system
{
	name = "airSmokePuff2";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.01.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.02.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.03.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.04.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.05.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.06.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.07.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.08.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.09.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.10.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.11.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.12.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.13.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.14.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.15.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.16.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.17.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.18.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.19.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.20.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.21.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.22.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.23.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.24.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.25.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.26.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.27.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.28.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.29.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.30.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.31.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.32.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.33.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.34.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.35.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.36.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.37.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.38.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.39.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.40.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.41.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.42.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.43.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.44.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.45.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.46.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.47.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.48.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.49.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.50.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.51.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.52.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.53.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.54.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.55.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.56.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.57.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.58.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.59.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.60.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.61.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.62.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.63.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.64.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.65.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.66.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.67.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.68.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.69.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.70.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.71.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.72.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.73.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.74.sgi";
			image = "/opt/data/anim/sean/airSmokePuff2/airSmokePuff2.75.sgi";

		}
	}
}


particle_system
{
	name = "airSmokePuff3";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.01.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.02.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.03.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.04.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.05.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.06.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.07.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.08.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.09.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.10.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.11.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.12.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.13.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.14.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.15.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.16.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.17.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.18.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.19.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.20.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.21.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.22.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.23.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.24.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.25.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.26.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.27.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.28.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.29.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.30.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.31.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.32.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.33.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.34.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.35.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.36.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.37.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.38.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.39.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.40.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.41.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.42.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.43.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.44.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.45.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.46.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.47.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.48.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.49.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.50.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.51.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.52.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.53.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.54.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.55.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.56.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.57.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.58.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.59.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.60.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.61.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.62.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.63.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.64.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.65.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.66.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.67.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.68.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.69.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.70.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.71.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.72.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.73.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.74.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.75.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.76.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.77.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.78.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.79.sgi";
			image = "/opt/data/anim/sean/airSmokePuff3/airSmokePuff3.80.sgi";

		}
	}
}

particle_system
{
	name = "airSmokePuff4";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 2.0; // lifetime of a particle, in seconds
	size_range = 80.0, 110.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;



			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.01.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.02.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.03.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.04.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.05.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.06.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.07.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.08.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.09.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.10.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.11.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.12.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.13.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.14.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.15.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.16.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.17.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.18.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.19.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.20.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.21.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.22.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.23.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.24.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.25.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.26.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.27.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.28.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.29.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.30.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.31.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.32.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.33.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.34.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.35.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.36.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.37.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.38.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.39.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.40.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.41.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.42.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.43.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.44.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.45.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.46.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.47.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.48.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.49.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.50.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.51.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.52.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.53.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.54.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.55.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.56.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.57.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.58.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.59.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.60.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.61.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.62.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.63.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.64.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.65.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.66.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.67.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.68.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.69.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.70.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.71.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.72.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.73.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.74.sgi";
			image = "/opt/data/anim/sean/airSmokePuff4/airSmokePuff4.75.sgi";

		}
	}
}
particle_system
{
	name = "groundFireball1 x1";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = 40.0, 40.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

//	texture = ""; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 1.0;
//		duration = 5.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//

			period = 0.02;
			loop = false;
			hold_last = true;
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.02_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.03_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.04_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.05_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.06_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.07_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.08_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.09_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.10_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.11_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.12_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.13_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.14_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.15_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.16_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.17_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.18_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.19_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.20_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.21_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.22_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.23_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.24_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.25_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.26_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.27_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.28_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.29_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.30_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.31_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.32_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.33_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.34_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.35_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.36_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.37_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.38_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.39_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.40_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.41_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.42_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.43_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.44_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.45_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.46_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.47_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.48_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.49_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.50_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.51_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.52_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.53_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.54_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.55_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.56_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.57_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.58_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.59_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.60_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.61_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.62_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.63_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.64_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.65_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.66_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.67_shifted.sgi";

		}
	}
}


particle_system
{
	name = "groundFireball1 x4";
	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 4.2; // lifetime of a particle, in seconds
	size_range = 40.0, 40.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

//	texture = ""; // The texture to apply to particles.  If an empty string is used, texturing is turned off. 
	
	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 1.0;
//		duration = 5.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 4., 4.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = circle; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			radius_range = 0., 10.;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}
	
	
	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//

			period = 0.02;
			loop = false;
			hold_last = true;
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.02_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.03_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.04_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.05_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.06_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.07_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.08_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.09_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.10_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.11_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.12_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.13_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.14_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.15_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.16_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.17_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.18_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.19_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.20_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.21_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.22_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.23_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.24_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.25_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.26_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.27_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.28_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.29_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.30_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.31_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.32_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.33_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.34_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.35_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.36_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.37_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.38_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.39_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.40_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.41_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.42_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.43_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.44_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.45_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.46_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.47_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.48_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.49_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.50_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.51_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.52_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.53_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.54_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.55_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.56_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.57_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.58_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.59_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.60_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.61_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.62_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.63_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.64_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.65_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.66_shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball1/groundFireball1.67_shifted.sgi";

		}
	}
}



particle_system
{
	name = "groundFireball_long1";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 4.0; // lifetime of a particle, in seconds
	size_range = 40.0, 40.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, -5.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;


			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.02-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.03-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.04-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.05-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.06-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.07-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.08-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.09-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.10-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.11-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.12-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.13-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.14-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.15-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.16-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.17-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.18-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.19-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.20-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.21-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.22-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.23-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.24-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.25-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.26-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.27-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.28-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.29-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.30-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.31-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.32-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.33-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.34-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.35-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.36-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.37-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.38-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.39-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.40-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.41-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.42-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.43-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.44-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.45-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.46-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.47-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.48-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.49-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.50-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.51-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.52-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.53-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.54-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.55-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.56-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.57-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.58-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.59-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.60-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.61-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.62-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.63-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.64-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.65-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_long1/groundFireball_long.66-shifted.sgi";

		}
	}
}

particle_system
{
	name = "groundFireball_wTrails1";

	emissive = false; // sets whether particles have to be "emissive" (additive blending) or not
	lighting = false; // turns on or off lighting for the particles
	alignment = billboard; // billboard or fixed

	time_to_live = 4.0; // lifetime of a particle, in seconds
	size_range = 40.0, 40.0; // a multiplier
	color_range = 1.0, 1.0, 1.0, 1.0, // start r, g, b, a
	              1.0, 1.0, 1.0, 0.8; // end r, g, b, a
	mass = 0.05; // mass of a single particle, in kilograms
	radius = 1.0; // in meters (has no effect on particle appearance; used only by the fluid friction operator)

	/*
	shape choices: 
	  point - a GL point
	  quad - a quad, with its local origin in the center of the quad
	  quad_offset - a quad, with its local origin at the bottom edge of the quad
	  quad_trianglestrip - a quad, constructed from a triangle strip
	  hexagon - a hexagon (not sure why you'd pick this...)
	  intersecting_quads_2 - two quads, intersecting at right angles; the line 
	                         formed by the two intersecting faces is coincident 
	                         with the y axis
	  intersecting_quads_3 - three quads intersecting at right angles
	  trail - a particle that leaves a trail behind; see trail_type
	*/
	shape = quad_offset;

	// emitters allow you to control the initial values for new particles.
	// multiple emitters may be specified, but you need at least one
	// (no particles will appear without at least one emitter)
	emitter
	{
		// you can set some options in emitters:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to emit particles.  in seconds.
		// duration - the amount of time that the emitter will be active.  in seconds.
		// endless - set this to true if you want the emitter to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
//		start_time = 0.0;
//		duration = 1.0;
//		endless = false;
		
		// If additive velocity is enabled, the velocity of the emitter will
		// be added to the initial velocity of the particles it creates. 
		// Additive velocity is enabled by default.  You should turn it off
		// for particle systems like smoke trails and puffy explosions, etc. 
		// You should leave it enabled for effects like tracers.
		additive_velocity = false;
		
		// counter allows you to control how many particles are created per second.
		// counter is optional, but do not list more than one
		counter
		{
			type = finite; // choices: random, finite
			
			// various args for various types:
			// random:
			//     rate_range min-particles-per-second, max-particles-per-second
			// finite:
			//     num_particles_range min-total-particles, max-total-particles
			// Note that the random counter will operate continuously for the life 
			// of the emitter, but the finite counter will be active only *once*, 
			// for the first frame of the life of the emitter.  Finite counters 
			// are useful if you want only a single particle, or some set number 
			// of particles.
			// A note on rate_range: The wider the range, the more sporadically 
			// the particles will be created.
			
			num_particles_range = 1., 1.;
		}
		
		// placement allows you to control where new particles are placed.
		// placement is optional, but do not list more than one
		placement
		{
			type = point; // choices: point, circle, sphere, line, multiline
			center = 0.0, 0.0, 0.0;
			
			// various args for various types:
			// point:
			//     center x, y, z
			// circle:
			//     center x, y, z
			//     radius_range min, max
			// line:
			//     point_a x, y, z
			//     point_b x, y, z
			// multiline:
			//     point x, y, z (can be listed many times)
			// orientation:
			//     orientation_range ?, ?, ?, ?, ?, ?
			
		}
		
		// velocity allows you to control the initial linear and rotational velocity for particles.
		// velocity is optional, but do not list more than one
		velocity
		{
			type = radial; // choices: radial
			//ranges for phi, theta, speed, rot_vel
			speed_range = 0.0, 0.0; // range of initial speed, in m/s
			rot_vel_range = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0; // range of initial rotational velocity, in degrees/s
			// phi_range and theta_range determine the shape of the "cone" of emitted particles (I think)
		}
	}


	// behaviors are a group of objects that allow you to control the behavior 
	// of existing particles.
	// multiple behaviors may be listed; it is OK to have no behaviors
	behavior
	{
		// you can set some options in behaviors:
		// start_time - the amount of time to wait after the particle system is 
		//              created before starting to affect particles.  in seconds.
		// duration - the amount of time that the behavior will be active.  in seconds.
		// endless - set this to true if you want the behavior to be active for 
		//           the life of the particle system.  If this is set to true, 
		//           duration is ignored.  You can use 0, false, or off to turn 
		//           this off, and 1, true, or on to turn this on.
		// These are the default values:
		// start_time = 0.0
		// duration = whatever
		// endless = true
		//
		
		// affectors allow you to control the behavior of existing particles.
		// multiple affectors may be listed; it is OK to have no affectors
		affector
		{
			type = texture_animation;
			// various parameters for various types:
			// linear_accel
			//     vector x, y, z
			// angular_accel
			//     vector x, y, z
			// linear_force
			//     vector x, y, z
			// fluid_friction
			//     density (units unknown)
			//     viscosity (units unknown)
			// texture_animation
			//     image "filename" (listed multiple times, once for every frame in animation)
			//     period seconds-between-each-frame (ie use 0.03333 for 30 fps)
			//     loop true/false (should animation loop forever?)
			//     hold_last true/false (should last frame be displayed when animation finishes?  only has an effect if loop is false.)
			//
			
			period = 0.033333333;
			loop = false;
			hold_last = true;


			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.02-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.03-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.04-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.05-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.06-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.07-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.08-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.09-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.10-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.11-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.12-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.13-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.14-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.15-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.16-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.17-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.18-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.19-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.20-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.21-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.22-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.23-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.24-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.25-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.26-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.27-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.28-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.29-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.30-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.31-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.32-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.33-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.34-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.35-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.36-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.37-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.38-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.39-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.40-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.41-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.42-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.43-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.44-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.45-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.46-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.47-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.48-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.49-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.50-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.51-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.52-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.53-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.54-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.55-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.56-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.57-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.58-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.59-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.60-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.61-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.62-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.63-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.64-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.65-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.66-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.67-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.68-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.69-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.70-shifted.sgi";
			image = "/opt/data/anim/sean/groundFireball_wTrails1/groundFireball_wTrails1.71-shifted.sgi";

		}
	}
}

}
